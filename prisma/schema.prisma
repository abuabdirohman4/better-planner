// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("POSTGRES_PRISMA_URL")
}

model Client {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique
  name                      String?
  Vision                    Vision[]
  HighFocusGoal             HighFocusGoal[]
  SelfDevelopmentCurriculum SelfDevelopmentCurriculum[]
  Task                      Task[]
  ToDontList                ToDontList[]
  BrainDump                 BrainDump[]
}

model Period {
  id                  Int                   @id @default(autoincrement())
  year                Int
  quarter             Int
  startDate           DateTime
  endDate             DateTime
  StatusHighFocusGoal StatusHighFocusGoal[]
  // Week                Week[]

  @@unique([year, quarter])
}

model VisionCategory {
  id     Int      @id @default(autoincrement())
  name   String
  Vision Vision[]
}

model Vision {
  id             Int            @id @default(autoincrement())
  Client         Client         @relation(fields: [clientId], references: [id])
  clientId       Int
  name           String?
  period         String?
  category       Int
  VisionCategory VisionCategory @relation(fields: [category], references: [id])
}

model HighFocusGoal {
  id                        Int                         @id @default(autoincrement())
  Client                    Client                      @relation(fields: [clientId], references: [id])
  clientId                  Int
  name                      String
  motivation                String
  Task                      Task[]
  SelfDevelopmentCurriculum SelfDevelopmentCurriculum[]
  StatusHighFocusGoal       StatusHighFocusGoal[]
}

model StatusHighFocusGoal {
  id              Int           @id @default(autoincrement())
  HighFocusGoal   HighFocusGoal @relation(fields: [highFocusGoalId], references: [id])
  highFocusGoalId Int
  Period          Period        @relation(fields: [periodId], references: [id])
  periodId        Int
  point           Int
  priority        Int
}

model SelfDevelopmentCurriculum {
  id              Int           @id @default(autoincrement())
  client          Client        @relation(fields: [clientId], references: [id])
  clientId        Int
  skill           String
  order           Int
  highFocusGoalId Int
  HighFocusGoal   HighFocusGoal @relation(fields: [highFocusGoalId], references: [id])
  Knowledge       Knowledge[]
}

model Knowledge {
  id                          Int                       @id @default(autoincrement())
  name                        String
  type                        String // ['Book', 'Workshop']
  SelfDevelopmentCurriculum   SelfDevelopmentCurriculum @relation(fields: [SelfDevelopmentCurriculumId], references: [id])
  SelfDevelopmentCurriculumId Int
}

model Task {
  id              Int            @id @default(autoincrement())
  client          Client         @relation(fields: [clientId], references: [id])
  clientId        Int
  name            String
  indent          Int            @default(0)
  order           Int            @default(0)
  completed       Boolean        @default(false)
  isMilestone     Boolean        @default(false)
  milestoneId     Int?
  isHighFocusGoal Boolean        @default(false)
  HighFocusGoal   HighFocusGoal? @relation(fields: [highFocusGoalId], references: [id])
  highFocusGoalId Int?
  Day             Day[]
  TimeLog         TimeLog[]
  TaskWeek        TaskWeek[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TimeLog {
  id        Int       @id @default(autoincrement())
  task      Task      @relation(fields: [taskId], references: [id])
  taskId    Int
  journal   String?
  startTime DateTime
  endTime   DateTime?
  duration  DateTime?
}

model ToDontList {
  id       Int    @id @default(autoincrement())
  Client   Client @relation(fields: [clientId], references: [id])
  clientId Int
  name     String
  order    Int
  week     Json
}

model BrainDump {
  id       Int      @id @default(autoincrement())
  Client   Client   @relation(fields: [clientId], references: [id])
  clientId Int
  text     String
  day      DateTime
}

model Day {
  id     Int      @id @default(autoincrement())
  taskId Int
  Task   Task     @relation(fields: [taskId], references: [id])
  date   DateTime
}

model Week {
  id        Int        @id @default(autoincrement())
  year      Int
  quarter   Int
  week      Int
  startDate DateTime
  endDate   DateTime
  // periodId  Int?
  // Period    Period?    @relation(fields: [periodId], references: [id])
  TaskWeeks TaskWeek[]

  // @@unique([year, periodId, week])
  @@unique([year, quarter, week])
}

model TaskWeek {
  id     Int  @id @default(autoincrement())
  taskId Int
  Task   Task @relation(fields: [taskId], references: [id])
  weekId Int
  Week   Week @relation(fields: [weekId], references: [id])
}
