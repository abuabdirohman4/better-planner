// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  tasks Task[]
}

// model Task {
//   id          Int       @id @default(autoincrement())
//   title       String
//   description String?
//   dueDate     DateTime
//   completed   Boolean   @default(false)
//   user        User      @relation(fields: [userId], references: [id])
//   userId      Int
//   timeLogs    TimeLog[]
// }

// model Task {
//   id          Int       @id @default(autoincrement())
//   index       Int? // Kolom baru untuk menyimpan urutan task
//   title       String
//   description String?
//   dueDate     DateTime
//   createdAt   DateTime  @default(now()) // Field baru untuk menyimpan waktu pembuatan task
//   updatedAt   DateTime  @updatedAt
//   completed   Boolean   @default(false)
//   userId      Int
//   parentId    Int? // Tambahkan ini untuk relasi anak
//   indentLevel Int       @default(0) // Kolom untuk tingkat indentasi
//   parent      Task?     @relation("TaskChildren", fields: [parentId], references: [id])
//   children    Task[]    @relation("TaskChildren")
//   user        User      @relation(fields: [userId], references: [id])
//   TimeLog     TimeLog[]
// }

model Task {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  id        Int      @id @default(autoincrement())
  text      String
  indent    Int
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
