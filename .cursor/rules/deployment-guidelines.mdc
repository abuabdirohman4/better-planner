---
description: "Deployment guidelines, production setup, and infrastructure best practices"
globs: ["**/vercel.json", "**/Dockerfile", "**/docker-compose.yml", "**/next.config.*", "**/.env*", "**/package.json"]
alwaysApply: true
---

# Deployment Guidelines

## Production Environment Setup

### Environment Variables

```bash
# Production environment variables
NEXT_PUBLIC_SUPABASE_URL="https://your-project.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-supabase-anon-key"
SUPABASE_SERVICE_ROLE_KEY="your-supabase-service-role-key"
NEXTAUTH_URL="https://your-domain.com"
NEXTAUTH_SECRET="your-production-secret-key"
NODE_ENV="production"
```

### Supabase Setup

```bash
# Database setup with Supabase
# Ensure Supabase project is created
# Verify RLS policies are enabled
# Test API connection with your credentials
# Set up authentication providers
```

## Vercel Deployment

### Vercel Configuration

```json
// vercel.json
{
    "framework": "nextjs",
    "buildCommand": "npm run build",
    "devCommand": "npm run dev",
    "installCommand": "npm install",
    "env": {
        "NEXT_PUBLIC_SUPABASE_URL": "@supabase_url",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY": "@supabase_anon_key",
        "SUPABASE_SERVICE_ROLE_KEY": "@supabase_service_role_key",
        "NEXTAUTH_URL": "@nextauth_url",
        "NEXTAUTH_SECRET": "@nextauth_secret"
    },
    "functions": {
        "app/api/**/*.ts": {
            "maxDuration": 30
        }
    }
}
```

### Deployment Steps

1. **Connect Repository**

    ```bash
    # Install Vercel CLI
    npm i -g vercel

    # Login to Vercel
    vercel login

    # Deploy to Vercel
    vercel
    ```

2. **Configure Environment Variables**
    - Go to Vercel Dashboard
    - Navigate to Project Settings
    - Add all required environment variables

3. **Supabase Setup**
    - Ensure Supabase project is created
    - Verify RLS policies are enabled
    - Test API connection with your credentials
    - Set up authentication providers

## Docker Deployment

### Dockerfile

```dockerfile
# Dockerfile
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build the application
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

CMD ["node", "server.js"]
```

### Docker Compose

```yaml
# docker-compose.yml
version: "3.8"

services:
    app:
        build: .
        ports:
            - "3000:3000"
        environment:
            - NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
            - NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
            - SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key
            - NEXTAUTH_URL=http://localhost:3000
            - NEXTAUTH_SECRET=your-secret-key
        depends_on:
            - db
        restart: unless-stopped

    # Note: Using Supabase instead of local PostgreSQL
    # Remove db service if using Supabase cloud
```

## Build Optimization

### Next.js Configuration

```javascript
// next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {
    output: "standalone",
    experimental: {
        serverComponentsExternalPackages: ["@supabase/supabase-js"],
    },
    images: {
        domains: ["your-domain.com"],
        formats: ["image/webp", "image/avif"],
    },
    compress: true,
    poweredByHeader: false,
    generateEtags: false,
    httpAgentOptions: {
        keepAlive: true,
    },
};

export default nextConfig;
```

### Build Scripts

```json
// package.json
{
    "scripts": {
        "build": "next build",
        "start": "next start",
        "build:analyze": "ANALYZE=true next build",
        "build:production": "NODE_ENV=production next build",
        "postbuild": "echo 'Build completed'"
    }
}
```

## Performance Optimization

### Bundle Analysis

```bash
# Install bundle analyzer
npm install --save-dev @next/bundle-analyzer

# Analyze bundle size
npm run build:analyze
```

### Image Optimization

```typescript
// Use Next.js Image component for optimization
import Image from 'next/image';

<Image
    src="/illustration/get-started.svg"
    width={400}
    height={500}
    alt="get started"
    priority={true}
    placeholder="blur"
    blurDataURL="data:image/jpeg;base64,..."
/>
```

### Caching Strategy

```typescript
// API route with caching
export async function GET() {
    const data = await fetchData();

    return new Response(JSON.stringify(data), {
        status: 200,
        headers: {
            "Cache-Control": "public, s-maxage=60, stale-while-revalidate=300",
            "Content-Type": "application/json",
        },
    });
}
```

## Security Best Practices

### Security Headers

```javascript
// next.config.mjs
const securityHeaders = [
    {
        key: "X-DNS-Prefetch-Control",
        value: "on",
    },
    {
        key: "Strict-Transport-Security",
        value: "max-age=63072000; includeSubDomains; preload",
    },
    {
        key: "X-XSS-Protection",
        value: "1; mode=block",
    },
    {
        key: "X-Frame-Options",
        value: "SAMEORIGIN",
    },
    {
        key: "X-Content-Type-Options",
        value: "nosniff",
    },
    {
        key: "Referrer-Policy",
        value: "origin-when-cross-origin",
    },
];

const nextConfig = {
    async headers() {
        return [
            {
                source: "/(.*)",
                headers: securityHeaders,
            },
        ];
    },
};
```

### Environment Security

```bash
# Use strong secrets
NEXTAUTH_SECRET=$(openssl rand -base64 32)

# Rotate secrets regularly
# Use different secrets for different environments
```

## Monitoring & Logging

### Error Tracking

```typescript
// lib/error-tracking.ts
export const logError = (error: Error, context?: Record<string, any>) => {
    console.error("Error:", error.message, context);

    // Send to error tracking service (Sentry, LogRocket, etc.)
    if (process.env.NODE_ENV === "production") {
        // Sentry.captureException(error, { extra: context });
    }
};
```

### Performance Monitoring

```typescript
// lib/analytics.ts
export const trackPageView = (url: string) => {
    if (process.env.NODE_ENV === "production") {
        // Google Analytics, Mixpanel, etc.
        gtag("config", "GA_MEASUREMENT_ID", {
            page_path: url,
        });
    }
};
```

## Database Management

### Migration Strategy

```bash
# Create migration using Supabase CLI
supabase migration new add_projects_table

# Deploy migrations to production
supabase db push

# Reset database (development only)
supabase db reset
```

### Backup Strategy

```bash
# Database backup using Supabase CLI
supabase db dump --file backup_$(date +%Y%m%d_%H%M%S).sql

# Restore from backup
supabase db reset --file backup_file.sql
```

## Health Checks

### API Health Check

```typescript
// app/api/health/route.ts
import { NextResponse } from "next/server";
import { createServerClient } from "@/lib/supabase/client";

export async function GET() {
    try {
        // Check Supabase connection
        const supabase = createServerClient();
        const { data, error } = await supabase.from('projects').select('count').limit(1);

        if (error) {
            throw error;
        }

        return NextResponse.json({
            status: "healthy",
            timestamp: new Date().toISOString(),
            database: "connected",
        });
    } catch (error) {
        return NextResponse.json(
            {
                status: "unhealthy",
                timestamp: new Date().toISOString(),
                database: "disconnected",
                error: error instanceof Error ? error.message : "Unknown error",
            },
            { status: 500 }
        );
    }
}
```

## CI/CD Pipeline

### GitHub Actions

```yaml
# .github/workflows/deploy.yml
name: Deploy to Production

on:
    push:
        branches: [main]

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm test

            - name: Build application
              run: npm run build

            - name: Deploy to Vercel
              uses: amondnet/vercel-action@v20
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.ORG_ID }}
                  vercel-project-id: ${{ secrets.PROJECT_ID }}
                  vercel-args: "--prod"
```

## Rollback Strategy

### Database Rollback

```bash
# Rollback to previous migration
supabase migration repair <migration_name>

# Or reset to specific migration
supabase db reset --to <migration_name>
```

### Application Rollback

```bash
# Vercel rollback
vercel rollback <deployment-url>

# Docker rollback
docker-compose down
docker-compose up -d --scale app=0
docker-compose up -d
```

## Best Practices

1. **Environment Separation**: Use different environments for dev, staging, and production
2. **Secret Management**: Never commit secrets to version control
3. **Database Migrations**: Always test migrations in staging first
4. **Health Monitoring**: Implement health checks and monitoring
5. **Backup Strategy**: Regular database backups and disaster recovery plan
6. **Security**: Keep dependencies updated and use security headers
7. **Performance**: Monitor bundle size and optimize images
8. **Error Tracking**: Implement proper error tracking and logging
9. **Testing**: Run tests before deployment
10. **Documentation**: Keep deployment documentation updated