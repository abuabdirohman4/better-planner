---
title: "Git Workflow & Versioning"
description: "Structured Git workflow that integrates with semantic versioning, automated releases, and professional development practices for Better Habit"
category: "Development"
tags: ["git", "workflow", "versioning", "commits", "branches"]
---

# Git Workflow & Versioning

## Overview

Better Habit follows a structured Git workflow that integrates with semantic versioning, automated releases, and professional development practices.

## Branch Strategy

### Main Branches
- **main**: Production-ready code, always deployable
- **develop**: Integration branch for features (optional)
- **release/**: Release preparation branches
- **hotfix/**: Critical bug fixes

### Feature Branches
- **feature/**: New features and enhancements
- **bugfix/**: Bug fixes and patches
- **chore/**: Maintenance and refactoring
- **docs/**: Documentation updates

### Branch Naming Convention
```bash
# Feature branches
feature/habit-streak-tracking
feature/calendar-view
feature/pwa-offline-mode

# Bug fix branches
bugfix/calendar-display-issue
bugfix/pwa-installation-fix
bugfix/progress-calculation-bug

# Chore branches
chore/update-dependencies
chore/refactor-habit-validation
chore/improve-performance

# Documentation branches
docs/update-api-documentation
docs/add-user-guide
docs/update-changelog
```

## Commit Message Standards

### Conventional Commits Format
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Commit Types
- **feat**: New features
- **fix**: Bug fixes
- **docs**: Documentation changes
- **style**: Code style changes (formatting, etc.)
- **refactor**: Code refactoring
- **perf**: Performance improvements
- **test**: Test additions/changes
- **chore**: Build process, versioning, etc.
- **ci**: CI/CD changes
- **build**: Build system changes

### Better Habit Specific Examples

#### Feature Commits
```bash
feat: add habit streak tracking with visual indicators
feat(calendar): implement habit completion calendar view
feat(pwa): add offline habit completion queuing
feat(analytics): create weekly progress visualization
feat(auth): implement Google OAuth integration
```

#### Bug Fix Commits
```bash
fix: resolve calendar not displaying habit completions
fix(pwa): correct iOS Safari installation issues
fix(google-sheets): fix habit completion sync problems
fix(mobile): resolve navigation bar overlapping content
fix(progress): correct weekly habit calculation logic
```

#### Documentation Commits
```bash
docs: update API documentation for habit endpoints
docs(changelog): add v1.1.0 release notes
docs(readme): update installation instructions
docs(api): document Google Sheets integration
docs(guide): add user guide for habit creation
```

#### Refactoring Commits
```bash
refactor: improve habit validation logic
refactor(components): extract reusable habit card component
refactor(api): optimize Google Sheets API calls
refactor(ui): improve mobile responsiveness
refactor(types): enhance TypeScript type definitions
```

#### Performance Commits
```bash
perf: optimize habit data loading with SWR caching
perf(calendar): improve calendar rendering performance
perf(pwa): reduce bundle size for faster loading
perf(api): implement request batching for Google Sheets
perf(ui): optimize component re-rendering
```

#### Chore Commits
```bash
chore: update dependencies to latest versions
chore(versioning): bump version to 1.1.0
chore(ci): update GitHub Actions workflow
chore(build): optimize webpack configuration
chore(scripts): add automated release script
```

## Git Workflow Process

### 1. Feature Development
```bash
# Create feature branch
git checkout -b feature/habit-streak-tracking

# Make changes and commit
git add .
git commit -m "feat: add habit streak tracking with fire emoji indicators"

# Push branch
git push origin feature/habit-streak-tracking

# Create pull request
# Merge after review
```

### 2. Bug Fix Process
```bash
# Create bugfix branch
git checkout -b bugfix/calendar-display-issue

# Fix the bug
git add .
git commit -m "fix: resolve calendar not displaying habit completions"

# Push branch
git push origin bugfix/calendar-display-issue

# Create pull request
# Merge after review
```

### 3. Release Process
```bash
# Ensure main branch is up to date
git checkout main
git pull origin main

# Create release branch
git checkout -b release/1.1.0

# Update changelog and version
# Run version script
./scripts/version.sh minor

# Push release branch
git push origin release/1.1.0

# Create pull request to main
# Merge after review
```

### 4. Hotfix Process
```bash
# Create hotfix branch from main
git checkout main
git checkout -b hotfix/critical-bug-fix

# Fix the critical bug
git add .
git commit -m "fix: resolve critical authentication issue"

# Push hotfix branch
git push origin hotfix/critical-bug-fix

# Create pull request
# Merge after review
```

## Tag Management

### Tag Creation
```bash
# Create annotated tag
git tag -a v1.1.0 -m "Release version 1.1.0"

# Create lightweight tag
git tag v1.1.0

# Push tags to remote
git push origin v1.1.0

# Push all tags
git push origin --tags
```

### Tag Management
```bash
# List all tags
git tag -l

# List tags with pattern
git tag -l "v1.*"

# Show tag details
git show v1.1.0

# Delete local tag
git tag -d v1.1.0

# Delete remote tag
git push origin :refs/tags/v1.1.0
```

## Versioning Integration

### Pre-Release Checklist
- [ ] All changes committed
- [ ] No uncommitted changes
- [ ] All tests passing
- [ ] Code reviewed
- [ ] Changelog updated
- [ ] Version ready to bump

### Release Process
```bash
# 1. Update changelog
# Edit CHANGELOG.md with new changes

# 2. Run version script
./scripts/version.sh minor

# 3. Review changes
git diff

# 4. Push to remote
git push origin main
git push origin v1.1.0

# 5. Create GitHub release
# Go to GitHub and create release
```

### Post-Release Process
- [ ] Verify release on GitHub
- [ ] Check deployment
- [ ] Monitor for issues
- [ ] Update documentation
- [ ] Notify team

## Git Hooks Integration

### Pre-commit Hook
```bash
#!/bin/sh
# .git/hooks/pre-commit

# Run linting
npm run lint

# Run type checking
npm run type-check

# Run tests
npm test
```

### Commit-msg Hook
```bash
#!/bin/sh
# .git/hooks/commit-msg

# Validate commit message format
commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?: .{1,50}'

if ! grep -qE "$commit_regex" "$1"; then
    echo "Invalid commit message format!"
    echo "Format: type(scope): description"
    exit 1
fi
```

## Conflict Resolution

### Merge Conflicts
```bash
# Check for conflicts
git status

# Resolve conflicts in files
# Edit conflicted files

# Add resolved files
git add .

# Complete merge
git commit
```

### Rebase Conflicts
```bash
# Start interactive rebase
git rebase -i HEAD~3

# Resolve conflicts
# Edit conflicted files

# Add resolved files
git add .

# Continue rebase
git rebase --continue
```

## Best Practices

### Git Best Practices
- âœ… Use descriptive commit messages
- âœ… Make small, focused commits
- âœ… Use conventional commit format
- âœ… Keep main branch clean
- âœ… Use feature branches
- âœ… Review code before merging
- âœ… Use meaningful branch names
- âœ… Tag releases properly

### Versioning Best Practices
- âœ… Follow semantic versioning
- âœ… Update changelog for every release
- âœ… Test before releasing
- âœ… Use automated scripts
- âœ… Keep version history
- âœ… Document breaking changes
- âœ… Plan release schedule
- âœ… Monitor post-release

### Workflow Best Practices
- âœ… Use pull requests for code review
- âœ… Keep branches up to date
- âœ… Resolve conflicts quickly
- âœ… Use meaningful PR titles
- âœ… Include detailed PR descriptions
- âœ… Test before merging
- âœ… Clean up merged branches
- âœ… Document workflow changes

## Troubleshooting

### Common Issues

#### Uncommitted Changes
```bash
# Check status
git status

# Stash changes
git stash

# Apply stashed changes
git stash pop

# List stashes
git stash list
```

#### Merge Conflicts
```bash
# Abort merge
git merge --abort

# Abort rebase
git rebase --abort

# Reset to previous state
git reset --hard HEAD~1
```

#### Tag Issues
```bash
# Delete local tag
git tag -d v1.1.0

# Delete remote tag
git push origin :refs/tags/v1.1.0

# Recreate tag
git tag -a v1.1.0 -m "Release version 1.1.0"
```

#### Branch Issues
```bash
# Delete local branch
git branch -d feature-branch

# Delete remote branch
git push origin --delete feature-branch

# Force delete local branch
git branch -D feature-branch
```

## Quick Reference

### Essential Commands
```bash
# Check status
git status

# Add changes
git add .

# Commit changes
git commit -m "type: description"

# Push changes
git push origin branch-name

# Pull changes
git pull origin branch-name

# Create branch
git checkout -b branch-name

# Switch branch
git checkout branch-name

# Merge branch
git merge branch-name

# Delete branch
git branch -d branch-name
```

### Versioning Commands
```bash
# Check version
npm version

# Bump version
npm version patch|minor|major

# Run version script
./scripts/version.sh patch|minor|major|prerelease

# List tags
git tag -l

# Show tag
git show v1.1.0
```

### Release Commands
```bash
# Quick release
./scripts/version.sh minor && git push origin main && git push origin v$(npm version --json | jq -r '.better-habit')

# Check release status
git log --oneline -10

# Verify tags
git show-ref --tags
```

---

**ðŸ“š Related Files**: `CHANGELOG.md`, `VERSION.md`, `scripts/version.sh`
**ðŸ”§ Scripts**: `./scripts/version.sh [patch|minor|major|prerelease]`
**ðŸ“‹ Workflow**: Feature â†’ Review â†’ Merge â†’ Release