---
title: "Versioning & Release Management"
description: "Professional versioning system for Better Habit using Semantic Versioning (SemVer) with automated release management"
category: "Development"
tags: ["versioning", "semver", "releases", "automation"]
---

# Versioning & Release Management

## Overview

Better Habit follows professional versioning practices using Semantic Versioning (SemVer) with automated release management. This rule ensures consistent versioning across the project lifecycle.

## Versioning Strategy

### Semantic Versioning Format
- **MAJOR.MINOR.PATCH** (e.g., `1.0.0`)
- **MAJOR** (1.x.x): Breaking changes, major new features
- **MINOR** (x.1.x): New features, backward compatible
- **PATCH** (x.x.1): Bug fixes, backward compatible
- **PRERELEASE** (1.0.0-alpha.1): Alpha, beta, or release candidate

### Version Types for Better Habit

#### Patch Release (1.0.1)
- Bug fixes and security patches
- Documentation updates
- Performance improvements
- UI/UX minor fixes
- Dependency updates
- Code refactoring without behavior changes

#### Minor Release (1.1.0)
- New habit tracking features
- UI/UX improvements
- New integrations (Google Sheets, etc.)
- Enhanced analytics
- New PWA features
- Additional habit categories
- New authentication methods

#### Major Release (2.0.0)
- Breaking changes in API
- Complete UI/UX redesign
- Major architecture changes
- Deprecated features removal
- Database schema changes
- Authentication system overhaul

#### Pre-release (1.1.0-alpha.1)
- Alpha testing features
- Beta testing releases
- Release candidates
- Feature previews
- Experimental functionality

## Release Process

### Pre-Release Checklist
- [ ] All tests passing (`npm run lint`)
- [ ] Code reviewed and approved
- [ ] CHANGELOG.md updated with changes
- [ ] VERSION.md updated with new version info
- [ ] Build successful (`npm run build`)
- [ ] No breaking changes (unless major release)
- [ ] PWA functionality tested
- [ ] Mobile responsiveness verified
- [ ] Google Sheets integration tested

### Automated Release Commands

```bash
# Patch release (bug fixes)
./scripts/version.sh patch

# Minor release (new features)
./scripts/version.sh minor

# Major release (breaking changes)
./scripts/version.sh major

# Pre-release (alpha/beta)
./scripts/version.sh prerelease
```

### Manual Release Process

```bash
# 1. Update version
npm version patch  # or minor, major, prerelease

# 2. Update CHANGELOG.md
# Add new version section with detailed changes

# 3. Update VERSION.md
# Update current version and add new version info

# 4. Commit changes
git add .
git commit -m "chore: bump version to X.X.X"

# 5. Create tag
git tag -a vX.X.X -m "Release version X.X.X"

# 6. Push to remote
git push origin main
git push origin vX.X.X
```

## File Management

### Required Files for Versioning

#### CHANGELOG.md
- **Purpose**: Track all notable changes
- **Format**: Keep a Changelog standard
- **Updates**: Required for every release
- **Sections**: Added, Changed, Deprecated, Removed, Fixed, Security

#### VERSION.md
- **Purpose**: Version history and roadmap
- **Updates**: Required for every release
- **Content**: Current version, release notes, upcoming features

#### package.json
- **Purpose**: NPM version tracking
- **Updates**: Automatic via npm version command
- **Scripts**: Version management commands

#### scripts/version.sh
- **Purpose**: Automated versioning script
- **Usage**: `./scripts/version.sh [patch|minor|major|prerelease]`
- **Features**: Automatic file updates, git tagging, validation

### File Update Patterns

#### CHANGELOG.md Updates
```markdown
## [X.X.X] - YYYY-MM-DD

### Added
- New feature descriptions
- New component descriptions
- New integration details

### Changed
- Modified functionality
- Updated UI/UX elements
- Performance improvements

### Fixed
- Bug fix descriptions
- Security patch details
- Issue resolutions

### Removed
- Deprecated features
- Unused components
- Legacy code removal
```

#### VERSION.md Updates
```markdown
## Current Version: X.X.X

### Version X.X.X (YYYY-MM-DD)
- **Type**: [patch|minor|major] Release
- **Status**: [Stable|Pre-release]
- **Changes**: See CHANGELOG.md for detailed changes
```

## Commit Message Standards

### Conventional Commits
```bash
# Feature additions
git commit -m "feat: add habit streak tracking"

# Bug fixes
git commit -m "fix: resolve calendar display issue"

# Breaking changes
git commit -m "feat!: redesign habit card component"

# Documentation
git commit -m "docs: update API documentation"

# Version bumps
git commit -m "chore: bump version to 1.1.0"

# Performance
git commit -m "perf: optimize habit data loading"

# Refactoring
git commit -m "refactor: improve habit validation logic"
```

### Commit Types
- **feat**: New features
- **fix**: Bug fixes
- **docs**: Documentation changes
- **style**: Code style changes
- **refactor**: Code refactoring
- **perf**: Performance improvements
- **test**: Test additions/changes
- **chore**: Build process, versioning, etc.

## GitHub Integration

### Release Process
1. **Create Release**: Use GitHub Releases interface
2. **Select Tag**: Choose the version tag (e.g., v1.1.0)
3. **Add Description**: Include changelog highlights
4. **Attach Assets**: Include build artifacts if needed
5. **Publish**: Make release public

### GitHub Actions
- **Trigger**: Push to tags (v*)
- **Actions**: Build, test, create release
- **Artifacts**: Build outputs, documentation
- **Notifications**: Team notifications on release

## Better Habit Specific Guidelines

### Feature Categories for Versioning

#### Habit Management
- **Patch**: Bug fixes in habit CRUD operations
- **Minor**: New habit types, categories, or settings
- **Major**: Complete habit system redesign

#### Tracking & Analytics
- **Patch**: Fix progress calculation bugs
- **Minor**: New analytics features, charts, reports
- **Major**: Complete analytics system overhaul

#### PWA Features
- **Patch**: Fix offline functionality bugs
- **Minor**: New PWA features, better offline support
- **Major**: Complete PWA architecture change

#### UI/UX
- **Patch**: Fix responsive design issues
- **Minor**: New UI components, improved UX
- **Major**: Complete design system overhaul

#### Integrations
- **Patch**: Fix Google Sheets sync issues
- **Minor**: New integration features
- **Major**: Change integration architecture

### Testing Requirements

#### Pre-Release Testing
- [ ] All pages load correctly
- [ ] Habit creation/editing works
- [ ] Progress tracking functions
- [ ] PWA installation works
- [ ] Mobile responsiveness
- [ ] Authentication flows
- [ ] Google Sheets integration
- [ ] Offline functionality
- [ ] Calendar view works
- [ ] Weekly progress displays

#### Browser Testing
- [ ] Chrome (desktop & mobile)
- [ ] Safari (desktop & mobile)
- [ ] Firefox (desktop & mobile)
- [ ] Edge (desktop)

#### Device Testing
- [ ] iPhone (Safari)
- [ ] Android (Chrome)
- [ ] Tablet (iPad/Android)
- [ ] Desktop (various screen sizes)

## Version Numbering Examples

### Patch Releases
- `1.0.0` ‚Üí `1.0.1` (bug fix)
- `1.1.0` ‚Üí `1.1.1` (security patch)
- `2.0.0` ‚Üí `2.0.1` (performance fix)

### Minor Releases
- `1.0.0` ‚Üí `1.1.0` (new habit categories)
- `1.1.0` ‚Üí `1.2.0` (new analytics features)
- `2.0.0` ‚Üí `2.1.0` (new PWA features)

### Major Releases
- `1.0.0` ‚Üí `2.0.0` (complete redesign)
- `2.0.0` ‚Üí `3.0.0` (new architecture)
- `3.0.0` ‚Üí `4.0.0` (breaking API changes)

### Pre-releases
- `1.0.0` ‚Üí `1.1.0-alpha.1` (alpha testing)
- `1.1.0-alpha.1` ‚Üí `1.1.0-beta.1` (beta testing)
- `1.1.0-beta.1` ‚Üí `1.1.0-rc.1` (release candidate)
- `1.1.0-rc.1` ‚Üí `1.1.0` (final release)

## Best Practices

### Do's
- ‚úÖ Always update CHANGELOG.md for every release
- ‚úÖ Use semantic versioning consistently
- ‚úÖ Test thoroughly before releasing
- ‚úÖ Use automated scripts
- ‚úÖ Keep version history
- ‚úÖ Document breaking changes clearly
- ‚úÖ Include migration guides for major releases

### Don'ts
- ‚ùå Don't skip version updates in documentation
- ‚ùå Don't release without testing
- ‚ùå Don't use inconsistent version numbering
- ‚ùå Don't forget to push tags to remote
- ‚ùå Don't release with uncommitted changes
- ‚ùå Don't skip pre-release testing
- ‚ùå Don't forget to update VERSION.md

## Troubleshooting

### Common Issues

#### Uncommitted Changes
```bash
# Check status
git status

# Stash changes
git stash

# Apply after versioning
git stash pop
```

#### Build Failures
```bash
# Check linting errors
npm run lint

# Fix errors and retry
npm run build
```

#### Tag Conflicts
```bash
# Delete local tag
git tag -d v1.0.1

# Delete remote tag
git push origin :refs/tags/v1.0.1

# Recreate tag
git tag -a v1.0.1 -m "Release version 1.0.1"
```

#### Version Rollback
```bash
# Reset to previous commit
git reset --hard HEAD~1

# Revert version in package.json
npm version 1.0.0 --no-git-tag-version
```

## Quick Reference

### Version Commands
```bash
# Check current version
npm version

# See all tags
git show-ref --tags

# See recent commits
git log --oneline -10

# Check uncommitted changes
git status
```

### Release Workflow
1. Update CHANGELOG.md
2. Run version script
3. Review changes
4. Push to GitHub
5. Create GitHub release
6. Verify deployment

### Emergency Procedures
- **Hotfix**: Use patch release for critical bugs
- **Rollback**: Revert to previous stable version
- **Recovery**: Use git reset and recreate release

---

**üìö Related Files**: `CHANGELOG.md`, `VERSION.md`, `scripts/version.sh`, `RELEASING.md`
**üîß Scripts**: `./scripts/version.sh [patch|minor|major|prerelease]`
**üìã Checklist**: See RELEASING.md for detailed release checklist